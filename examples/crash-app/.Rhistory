lon[i] <- x[[i]][2]
}
crash <- cbind(crash, as.numeric(lat), as.numeric(lon))
View(crash)
myLocation <- "Greensboro, North Carolina"
maptype1 = c("watercolor", "toner", "watercolor")
maptype2 = c("roadmap", "terrain", "satellite", "hybrid")
myMap <- get_map(location = myLocation,
source = "google", maptype = "roadmap", zoom = 7, crop = FALSE)
ui <- fluidPage(
# App title -------------------------------------------------------
titlePanel("Modeling the Distributions of Fatal Car Crashes"),
# Sidebar ---------------------------------------------------------
sidebarLayout(
sidebarPanel(
# Select the categorical variable for the map
selectInput("Var3",
"Select categorical variable",
choices = c(CRASH_TYPE = "crash type", ALCOHOL_FL = "alcohol involved", Teen_DRIVE = "TEEN_DRIVE", OLDER_DRIV = "OLDER_DRIVE", DIR = "DIR")
)
),
# Main panel ----------------------------------------------------
mainPanel(
# Plot population distribution
plotOutput("crashPlot")
)
)
)
server <- function(input, output, session){
output$crashPlot <- renderPlot({
ggmap(myMap) +
geom_point(data = crash, aes(x = lon, y = lat),
#color = input$Var3
alpha = .5, size = 2)
})
}
shinyApp(ui, server)
class(crash$lat)
View(crash)
library(dplyr)
library(ggplot2)
library(stringr)
library(GGally)
library(ggmap)
# Load data ---------------------------------------------------------
crash <- read.csv("ncdot-fatal-crashes.csv", sep = ";")
x <- str_split(crash$geo_point_2d, ",")
lat <- rep(NA, 1000)
lon <- rep(NA, 1000)
for(i in 1:1000){
lat[i] <- as.numeric(x[[i]][1])
lon[i] <- as.numeric(x[[i]][2])
}
crash <- cbind(crash, lat, lon)
myLocation <- "Greensboro, North Carolina"
maptype1 = c("watercolor", "toner", "watercolor")
maptype2 = c("roadmap", "terrain", "satellite", "hybrid")
myMap <- get_map(location = myLocation,
source = "google", maptype = "roadmap", zoom = 7, crop = FALSE)
# Begin ui definition -----------------------------------------------
ui <- fluidPage(
# App title -------------------------------------------------------
titlePanel("Modeling the Distributions of Fatal Car Crashes"),
# Sidebar ---------------------------------------------------------
sidebarLayout(
sidebarPanel(
# Select the categorical variable for the map
selectInput("Var3",
"Select categorical variable",
choices = c(CRASH_TYPE = "crash type", ALCOHOL_FL = "alcohol involved", Teen_DRIVE = "TEEN_DRIVE", OLDER_DRIV = "OLDER_DRIVE", DIR = "DIR")
)
),
# Main panel ----------------------------------------------------
mainPanel(
# Plot population distribution
plotOutput("crashPlot")
)
)
)
server <- function(input, output, session){
output$crashPlot <- renderPlot({
ggmap(myMap) +
geom_point(data = crash, aes(x = lon, y = lat),
#color = input$Var3
alpha = .5, size = 2)
})
}
shinyApp(ui, server)
runApp()
runApp()
mtcars$transmission[mtcars$am == 0] = "automatic"
mtcars$transmission[mtcars$am == 1] = "manual"
mtcars$transmission <-
ifelse(mtcars$am == 0,
"automatic",
"manual")
mtcars <- mtcars %>%
mutate(
transmission =
case_when(
0 ~ automatic,
1 ~ manual
)
)
mtcars <- mtcars %>%
mutate(
transmission =
case_when(
0 ~ automatic,
1 ~ manual
)
)
mtcars <- mtcars %>%
mutate(
transmission =
case_when(
am == 0 ~ "automatic",
am == 1 ~ "manual"
)
)
View(mtcars)
mtcars$gear_char[mtcars$am == 3] = "three"
mtcars$gear_char[mtcars$am == 4] = "four"
mtcars$gear_char[mtcars$am == 5] = "five"
mtcars$gear_char <-
ifelse(mtcars$gear == 3,
"three",
ifelse(mtcars$gear == 4,
"four",
"five")
)
mtcars <- mtcars %>%
mutate(
gear_char =
case_when(
gear == 3 ~ "three",
gear == 4 ~ "four",
gear == 5 ~ "five"
)
)
names(mtcars)
plot(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$disp)
plot(mtcars$mpg ~ mtcars$disp, col = cyl)
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$cyl)
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$transmission)
plot(mtcars$mpg ~ mtcars$disp, col = as.factor(mtcars$transmission))
?legend
legend("topright", col = as.factor(mtcars$transmission))
legend("topright", col = as.factor(mtcars$transmission), c("automatic", "manual"))
legend("topright", col = as.factor(mtcars$transmission), c("automatic", "manual"), pch = 1)
mtcars$trans_color <-
ifelse(mtcars$transmission == "automatic",
"green",
"blue")
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$trans_color)
legend("topright", col = mtcars$trans_color, c("automatic", "manual"), pch = 1)
legend("topright", col = c("green", "blue"), c("automatic", "manual"), pch = 1)
?legend
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$trans_color)
legend("topright", legend = c("automatic", "manual"), pch = 1, col = c("green", "blue"))
ggplot(mtcars, aes(x = disp, y = mpg, color = transmission)) +
geom_point()
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$trans_color)
legend("topright", legend = c("automatic", "manual"), pch = 1, col = c("green", "blue"))
ggplot(mtcars, aes(x = disp, y = mpg, color = transmission)) +
geom_point()
setwd("~/Desktop/Talks:Conferences/useR/2017/2017-07-05-teach-ds-to-new-user")
?ggsave
pdf("scatter_base.pdf", width = 5, height = 3)
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$trans_color)
legend("topright", legend = c("automatic", "manual"), pch = 1, col = c("green", "blue"))
dev.off()
p <- ggplot(mtcars, aes(x = disp, y = mpg, color = transmission)) +
geom_point()
ggsave("scatter_base.pdf", p, width = 5, height = 3)
pdf("plots/scatter_base.pdf", width = 5, height = 3)
plot(mtcars$mpg ~ mtcars$disp, col = mtcars$trans_color)
legend("topright", legend = c("automatic", "manual"), pch = 1, col = c("green", "blue"))
dev.off()
p <- ggplot(mtcars, aes(x = disp, y = mpg, color = transmission)) +
geom_point()
ggsave("plots/scatter_tidy.pdf", p, width = 5, height = 3)
ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point()
?mtcars
table(mtcars$vs)
table(mtcars$cyl)
?cut
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl5 = mtcars[mtcars$cyl == 5, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
plot(mpg ~ disp, data = mtcars, col = trans_color)
plot(mpg ~ disp, data = mtcars_cyl4, col = trans_color)
plot(mpg ~ disp, data = mtcars_cyl6, col = trans_color)
plot(mpg ~ disp, data = mtcars_cyl8, col = trans_color)
par(mfrow = c(1, 3))
plot(mpg ~ disp, data = mtcars_cyl4, col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6, col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8, col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
par(mfrow = c(1, 3))
plot(mpg ~ disp, data = mtcars_cyl4,
col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6,
col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8,
col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
mtcars$trans_color <-
ifelse(mtcars$transmission == "automatic",
"green",
"blue")
mtcars$trans_color <-
ifelse(mtcars$transmission == "automatic",
"green",
"blue")
mtcars$transmission[mtcars$am == 0] = "automatic"
mtcars$transmission[mtcars$am == 1] = "manual"
mtcars$trans_color <-
ifelse(mtcars$transmission == "automatic",
"green",
"blue")
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
plot(mpg ~ disp, data = mtcars_cyl4,
col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6,
col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8,
col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_wrap(cyl)
ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_grid(cyl ~ .)
ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_grid(. ~ cyl)
?facet_wrap
ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_wrap(~ cyl)
p <- ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_wrap(~ cyl)
ggsave("plots/scatter_facet_tidy.pdf", p, width = 5, height = 3)
pdf("plots/scatter_facet_base.pdf", width = 5, height = 3)
par(mfrow = c(1, 3))
plot(mpg ~ disp, data = mtcars_cyl4,
col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6,
col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8,
col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
dev.off()
pdf("plots/scatter_facet_base.pdf", width = 5, height = 2)
par(mfrow = c(1, 3))
plot(mpg ~ disp, data = mtcars_cyl4,
col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6,
col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8,
col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
dev.off()
p2 <- ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_wrap(~ cyl)
ggsave("plots/scatter_facet_tidy.pdf", p2, width = 5, height = 2)
# recode two-level variable
## base R
### option 1
mtcars$transmission[mtcars$am == 0] = "automatic"
mtcars$transmission[mtcars$am == 1] = "manual"
### option 2
mtcars$transmission <-
ifelse(mtcars$am == 0,
"automatic",
"manual")
## tidyverse
mtcars <- mtcars %>%
mutate(
transmission =
case_when(
am == 0 ~ "automatic",
am == 1 ~ "manual"
)
)
# recode multi-level variable
## base R
### option 1
mtcars$gear_char[mtcars$am == 3] = "three"
mtcars$gear_char[mtcars$am == 4] = "four"
mtcars$gear_char[mtcars$am == 5] = "five"
### option 2
mtcars$gear_char <-
ifelse(mtcars$gear == 3,
"three",
ifelse(mtcars$gear == 4,
"four",
"five")
)
## tidyverse
mtcars <- mtcars %>%
mutate(
gear_char =
case_when(
gear == 3 ~ "three",
gear == 4 ~ "four",
gear == 5 ~ "five"
)
)
# visualizing multi-level variables, coloring
## base R
mtcars$trans_color <-
ifelse(mtcars$transmission == "automatic",
"green",
"blue")
pdf("plots/scatter_base.pdf", width = 5, height = 3)
plot(mtcars$mpg ~ mtcars$disp,
col = mtcars$trans_color)
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
dev.off()
## tidyverse
p1 <- ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point()
ggsave("plots/scatter_tidy.pdf", p1, width = 5, height = 3)
# visualizing multi-level variables, coloring + faceting
## base R
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
pdf("plots/scatter_facet_base.pdf", width = 5, height = 2)
par(mfrow = c(1, 3))
plot(mpg ~ disp, data = mtcars_cyl4,
col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6,
col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8,
col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
dev.off()
## tidyverse
p2 <- ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_wrap(~ cyl)
ggsave("plots/scatter_facet_tidy.pdf", p2, width = 5, height = 2)
# recode two-level variable
## base R
### option 1
mtcars$transmission[mtcars$am == 0] = "automatic"
mtcars$transmission[mtcars$am == 1] = "manual"
### option 2
mtcars$transmission <-
ifelse(mtcars$am == 0,
"automatic",
"manual")
## tidyverse
mtcars <- mtcars %>%
mutate(
transmission =
case_when(
am == 0 ~ "automatic",
am == 1 ~ "manual"
)
)
# recode multi-level variable
## base R
### option 1
mtcars$gear_char[mtcars$am == 3] = "three"
mtcars$gear_char[mtcars$am == 4] = "four"
mtcars$gear_char[mtcars$am == 5] = "five"
### option 2
mtcars$gear_char <-
ifelse(mtcars$gear == 3,
"three",
ifelse(mtcars$gear == 4,
"four",
"five")
)
## tidyverse
mtcars <- mtcars %>%
mutate(
gear_char =
case_when(
gear == 3 ~ "three",
gear == 4 ~ "four",
gear == 5 ~ "five"
)
)
# visualizing multi-level variables, coloring
## base R
mtcars$trans_color <-
ifelse(mtcars$transmission == "automatic",
"green",
"blue")
pdf("plots/scatter_base.pdf", width = 5, height = 3)
plot(mtcars$mpg ~ mtcars$disp,
col = mtcars$trans_color)
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
dev.off()
## tidyverse
p1 <- ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point()
ggsave("plots/scatter_tidy.pdf", p1, width = 5, height = 3)
# visualizing multi-level variables, coloring + faceting
## base R
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
pdf("plots/scatter_facet_base.pdf", width = 5, height = 2)
par(mfrow = c(1, 3))
plot(mpg ~ disp, data = mtcars_cyl4,
col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6,
col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8,
col = trans_color, main = "Cyl 8")
legend("topright",
legend = c("automatic", "manual"),
pch = 1, col = c("green", "blue"))
dev.off()
## tidyverse
p2 <- ggplot(mtcars,
aes(x = disp, y = mpg,
color = transmission)) +
geom_point() +
facet_wrap(~ cyl)
ggsave("plots/scatter_facet_tidy.pdf", p2, width = 5, height = 2)
runApp('~/Downloads/FinalProject_DasCrew-master')
runApp('~/Downloads/FinalProject_DasCrew-master')
runApp('~/Downloads/FinalProject_DasCrew-master')
output$crashPlot <- renderPlot({
ggmap(myMap) +
geom_point(data = crash, aes_string(x = "lon", y = "lat", color = input$Var3),
alpha = .5, size = 2)
})
runApp('~/Downloads/FinalProject_DasCrew-master')
library(ggmap)
myLocation <- "Greensboro, North Carolina"
maptype1 = c("watercolor", "toner", "watercolor")
maptype2 = c("roadmap", "terrain", "satellite", "hybrid")
myMap <- get_map(location = myLocation,
source = "google", maptype = "roadmap", zoom = 7, crop = FALSE)
save(myMap, file = "myMap.Rdata")
runApp('crash-app')
myMap <- get_map(location = myLocation,
source = "google", maptype = "roadmap", zoom = 7, crop = FALSE)
runApp('crash-app')
crash <- read.csv("data/ncdot-fatal-crashes.csv", sep = ";")
crash <- read.csv("data/ncdot-fatal-crashes.csv", sep = ";")
setwd("~/Desktop/Talks:Conferences/useR/2017/2017-07-05-teach-ds-to-new-user/crash-app")
crash <- read.csv("data/ncdot-fatal-crashes.csv", sep = ";")
x <- str_split(crash$geo_point_2d, ",")
lat <- rep(NA, 1000)
lon <- rep(NA, 1000)
for(i in 1:1000){
lat[i] <- as.numeric(x[[i]][1])
lon[i] <- as.numeric(x[[i]][2])
}
crash <- cbind(crash, lat, lon)
View(crash)
?selectInput
names(crash)
runApp()
